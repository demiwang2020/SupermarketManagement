@page "/editproduct/{productId}"
@attribute [Authorize(Policy ="AdminOnly")]
@inject NavigationManager NavigationManager;
@inject UserCases.UseCaseInterfaces.IEditProductUseCase EditProductUseCase;
@inject UserCases.UseCaseInterfaces.IViewProductsUseCase ViewProductsUseCase;
@inject UserCases.UseCaseInterfaces.IGetProductByIdUseCase GetProductByIdUseCase;
@inject UserCases.UseCaseInterfaces.IViewCategoriesUseCase ViewCategoriesUseCase;
<h3>Edit Product</h3>

@if (product != null)
{

    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="@product.Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
        <label for="categoryName">CategoryName</label>
        <select id="categoryName" class="form-control" @bind="product.CategoryId">
            <option selected></option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.Name</option>
            }
        </select>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="@product.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
        </div>
         <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="@product.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" @onclick="OnClickCancle" class="btn btn-primary">Cancle</button>
    </EditForm>

}

@code {
    [Parameter]
    public string ProductId { get; set; }
    private Product product;
    IEnumerable<Category> categories;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(ProductId, out int iProductId))
        {
            var prod = GetProductByIdUseCase.Execute(iProductId);
            this.product = new Product(prod.ProductId,prod.CategoryId,prod.Name, prod.Price, prod.Quantity);
        }
    }
    private void OnValidSubmit()
    {
        EditProductUseCase.Execute(this.product);
        NavigationManager.NavigateTo("/products");

    }
     private void OnClickCancle()
    {

        NavigationManager.NavigateTo("/products");

    }
}
