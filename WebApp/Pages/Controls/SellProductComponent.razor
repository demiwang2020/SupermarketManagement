@inject UserCases.UseCaseInterfaces.IGetProductByIdUseCase GetProductByIdUseCase;
@inject UserCases.UseCaseInterfaces.ISellProductUseCase SellProductUseCase;
@if (productToSell != null)
{
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="=form-group">
            <label for="name">Product Name</label>
            <input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />
        </div>
         <div class="=form-group">
            <label for="price">Price</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}",productToSell.Price))" />
        </div>
        <div class="=form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty"  @bind-Value="@productToSell.Quantity" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Sale</button> 
    </EditForm>
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
         <div class="alert alert-danger">@errorMessage</div>
    }


   
}

@code {
    private string errorMessage;
    private Product productToSell;
    [Parameter]
    public string CashierName { get; set; }         
    [Parameter]
    public Product SelectedProduct { get; set; }      
    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedProduct != null)
        {
            productToSell = new Product(SelectedProduct.ProductId, SelectedProduct.CategoryId, SelectedProduct.Name, SelectedProduct.Price, SelectedProduct.Quantity);
            productToSell.Quantity = 0;
        }
        else
        {
            productToSell = null;

        }

    }
    public void SellProduct() {

        if (string.IsNullOrWhiteSpace(CashierName))
            {
                errorMessage = "Cashier's name is missing,cannot sell";
                return;
            }
        var product=GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {

            errorMessage = "The quantity has to be greater than zero.";

        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName,product.ProductId,product.Quantity,productToSell.Quantity);
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left.It is not enough.";
        }
    }
}
